import type { Connection, HydratedDocument, Model } from 'mongoose';
import type IMigration from './interfaces/IMigration';
import type IMigratorOptions from './interfaces/IMigratorOptions';
export * as IOptions from './interfaces/IOptions';
declare class Migrator {
    readonly migrationModel: Model<IMigration>;
    readonly connection: Connection;
    private uri?;
    private template;
    private migrationsPath;
    private collection;
    private autosync;
    private cli;
    private constructor();
    static connect(options: IMigratorOptions): Promise<Migrator>;
    close(): Promise<void>;
    list(): Promise<HydratedDocument<IMigration>[]>;
    create(migrationName: string): Promise<HydratedDocument<IMigration>>;
    run(direction: 'up' | 'down', migrationName?: string, single?: boolean): Promise<HydratedDocument<IMigration>[]>;
    sync(): Promise<HydratedDocument<IMigration>[]>;
    prune(): Promise<HydratedDocument<IMigration>[]>;
    private noPendingMigrations;
    private log;
    private logMigrationStatus;
    private getTemplate;
    private ensureMigrationsPath;
    private connected;
    private syncMigrations;
    private getMigrations;
    private choseMigrations;
    private runMigrations;
}
export default Migrator;
//# sourceMappingURL=migrator.d.ts.map